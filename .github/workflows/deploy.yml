name: Auto Update and Deploy Cloudflare WAF Rules

on:
  schedule:
    - cron: '0 3 * * *'  # 每天凌晨 3 点 (UTC)
  workflow_dispatch:      # 允许手动触发

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # 【已删除】不再需要 TF_STATE_DIR，我们使用 Terraform 的默认行为
      ABUSEIPDB_API_KEY: ${{ secrets.ABUSEIPDB_API_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    steps:
    # 【修正】步骤 1: 检出代码应为第一步
    - name: Checkout Code
      uses: actions/checkout@v4

    # 【修正】步骤 2: 恢复 Terraform State 缓存
    - name: Restore Terraform State from Cache
      id: tf-cache
      uses: actions/cache/restore@v4
      with:
        # 【修正】路径直接指向项目根目录的 terraform.tfstate
        path: terraform.tfstate
        # 【修正】使用一个更简单、固定的 key
        key: terraform-state-cache

    # 3. 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # 4. 安装 Python 依赖
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml

    # 5. 运行脚本更新 rules.yaml
    - name: Update ASN Rules from AbuseIPDB
      run: python update_abuseipdb_asns.py

    # 6. 提交并推送 rules.yaml 的变更
    - name: Commit and push if rules.yaml changed
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add rules.yaml
        if ! git diff --staged --quiet; then
          git commit -m "chore(waf): Auto-update WAF rules with latest ASN list"
          git push
        else
          echo "No changes to WAF rules. Skipping commit."
        fi

    # 7. 设置 Terraform 环境
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    # 8. Terraform 初始化和验证
    - name: Terraform Init and Validate
      run: |
        # 【删除】不再需要 mkdir，因为我们使用根目录
        terraform init
        terraform validate

    # 9. Terraform 部署
    - name: Terraform Apply
      run: terraform apply -auto-approve
 
    # 【修正】步骤 10: 保存 Terraform State 到缓存
    - name: Save Terraform State to Cache
      if: always()
      uses: actions/cache/save@v4
      with:
        # 【修正】路径直接指向项目根目录的 terraform.tfstate
        path: terraform.tfstate
        # 【修正】使用与恢复步骤完全相同的 key
        key: ${{ steps.tf-cache.outputs.cache-primary-key || 'terraform-state-cache' }}
